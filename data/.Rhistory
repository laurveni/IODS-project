lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
str(lrn14)
dim(lrn14)
library(dplyr)
library(dplyr)
# questions related to deep, surface and strategic learning
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
# select the columns related to deep learning and create column 'deep' by averaging
deep_columns <- select(lrn14, one_of(deep_questions))
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
lrn14$deep <- rowMeans(deep_columns)
# select the columns related to deep learning and create column 'deep' by averaging
deep_columns <- select(lrn14, one_of(deep_questions))
# select the columns related to deep learning and create column 'deep' by averaging
deep_columns <- select(lrn14, one_of(deep_questions))
lrn14$deep <- rowMeans(deep_columns)
# select the columns related to surface learning and create column 'surf' by averaging
surface_columns <- select(lrn14, one_of(surface_questions))
lrn14$surf <- rowMeans(surface_columns)
# select the columns related to strategic learning and create column 'stra' by averaging
strategic_columns <- select(lrn14,one_of(strategic_questions))
lrn14$stra <- rowMeans(strategic_columns)
lrn14
dim(lrn14)
# choose a handful of columns to keep
keep_columns <- c("gender","Age","attitude", "deep", "stra", "surf", "Points")
# select the 'keep_columns' to create a new dataset
learning2014 <- select(lrn14,one_of(keep_columns))
# choose a handful of columns to keep
keep_columns <- c("gender","Age","Attitude", "deep", "stra", "surf", "Points")
# select the 'keep_columns' to create a new dataset
learning2014 <- select(lrn14,one_of(keep_columns))
# see the stucture of the new dataset
str(learning2014)
# change the name of columns 2,3 and 7
colnames(learning2014)[2] <- "age"
colnames(learning2014)[3] <- "attitude"
colnames(learning2014)[7] <- "points"
# select rows where points is greater than zero
learning2014 <- filter(learning2014, points>0)
# see the stucture of the new dataset
str(learning2014)
setwd("~/GitHub/IODS-project/data")
#read the data sets
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
#dimensions of the data sets
dim(hd)
dim(gii)
#structure
str(hd)
str(gii)
# access the dplyr library
library(dplyr)
#summaries
summary(hd)
summary(gii)
#rename the variables with (shorter) descriptive names
colnames(hd) <- c("rank", "country", "hdi", "life_exp", "exp_edu", "mean_edu","gni_c","gni_rank")
colnames(gii) <-  c("gii_rank", "country","gii", "mat_mort","ad_birth","repr_parl","sedu_f","sed_m","lab_f","lab_m")
# define a new column in gii: ratio of Female and Male populations with secondary education
gii <- mutate(gii, sedu_ratio= sedu_f/sed_m)
# define a new column in gii: ratio of labour force participation of females and males
gii <- mutate(gii, lab_ratio=lab_f/lab_m)
# join the two datasets using country as identifier
human <- inner_join(hd, gii, by = "country")
#check structure and dimensions: 195 observations and 19 variables
str(human)
dim(human)
# save the data set in the data folder
write.csv(human, file="human.csv",row.names=FALSE)
# access the tidyr and stringr packages
library(tidyr)
library(stringr)
# look at the structure of the gni_c column in 'human'
str(human$gni_c)
# remove the commas from gni_c and print out a numeric version of it
str_replace(human$gni_c, pattern=",", replace ="") %>% as.numeric
str(human$gni_c)
# remove the commas from gni_c and mutate it into numeric
human$gni_c <- str_replace(human$gni_c, pattern=",", replace ="") %>% as.numeric
human$gni_c
# columns to keep
keep <- c("country", "sedu_ratio", "lab_ratio", "life_exp", "exp_edu", "gni_c", "mat_mor", "ad_birth", "repr_parl")
# select the 'keep' columns
human <- select(human, one_of(keep))
# columns to keep
keep <- c("country", "sedu_ratio", "lab_ratio", "life_exp", "exp_edu", "gni_c", "mat_mort", "ad_birth", "repr_parl")
# select the 'keep' columns
human <- select(human, one_of(keep))
#read the data sets
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
#dimensions of the data sets
dim(hd)
dim(gii)
#structure
str(hd)
str(gii)
# access the dplyr library
library(dplyr)
#summaries
summary(hd)
summary(gii)
#rename the variables with (shorter) descriptive names
colnames(hd) <- c("rank", "country", "hdi", "life_exp", "exp_edu", "mean_edu","gni_c","gni_rank")
colnames(gii) <-  c("gii_rank", "country","gii", "mat_mort","ad_birth","repr_parl","sedu_f","sed_m","lab_f","lab_m")
# define a new column in gii: ratio of Female and Male populations with secondary education
gii <- mutate(gii, sedu_ratio= sedu_f/sed_m)
# define a new column in gii: ratio of labour force participation of females and males
gii <- mutate(gii, lab_ratio=lab_f/lab_m)
# join the two datasets using country as identifier
human <- inner_join(hd, gii, by = "country")
#check structure and dimensions: 195 observations and 19 variables
str(human)
dim(human)
# save the data set in the data folder
write.csv(human, file="human.csv",row.names=FALSE)
# access the tidyr and stringr packages
library(tidyr)
library(stringr)
# look at the structure of the gni_c column in 'human': characters
str(human$gni_c)
# remove the commas from gni_c and mutate it into numeric
human$gni_c <- str_replace(human$gni_c, pattern=",", replace ="") %>% as.numeric
# columns to keep
keep <- c("country", "sedu_ratio", "lab_ratio", "life_exp", "exp_edu", "gni_c", "mat_mort", "ad_birth", "repr_parl")
# select the 'keep' columns
human <- select(human, one_of(keep))
str(human)
# print out a completeness indicator of the 'human' data
complete.cases(human)
# print out the data along with a completeness indicator as the last column
data.frame(human[-1], comp = complete.cases(human))
# filter out all rows with NA values
human_ <- filter(human, comp)
# print out the data along with a completeness indicator as the last column
data.frame(human[-1], comp = complete.cases(human))
# filter out all rows with NA values
human_ <- filter(human, comp)
# filter out all rows with NA values
human_ <- filter(human, comp= complete.cases(human))
# completeness indicator of the 'human' data
comp <- complete.cases(human)
# print out the data along with a completeness indicator as the last column
data.frame(human[-1], comp)
# filter out all rows with NA values
human_ <- filter(human, comp)
human_
# look at the last 10 observations of human
tail(human, n=10)
# define the last indice we want to keep
last <- nrow(human) - 7
# choose everything until the last 7 observations
human_ <- human[1:last, ]
# add countries as rownames
rownames(human_) <- human_$country
# remove the Country variable
human_ <- select(human, -country)
#structure of human_
str(human_)
# save the data set in the data folder
write.csv(human, file="human.csv",row.names=FALSE)
setwd("~/GitHub/IODS-project")
# save the data set in the data folder
write.csv(human, file="human.csv",row.names=FALSE)
# save the data set in the data folder
write.csv(human_, file="human.csv",row.names=FALSE)
# save the data set in the data folder
write.csv(human_, file="human.csv",row.names=FALSE)
# save the data set in the data folder
write.csv(human_, file="human.csv",row.names=FALSE)
setwd("~/GitHub/IODS-project/data")
# save the data set in the data folder
write.csv(human_, file="human.csv",row.names=FALSE)
setwd("~/GitHub/IODS-project")
setwd("~/GitHub/IODS-project/data")
# save the data set in the data folder
write.csv(human_, file="human.csv")
# save the data set in the data folder
write.csv(human_, file="human.csv", row.names = FALSE)
setwd("~/GitHub/IODS-project")
setwd("~/GitHub/IODS-project/data")
#read the data sets
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
#dimensions of the data sets
dim(hd)
dim(gii)
#structure
str(hd)
str(gii)
# access the dplyr library
library(dplyr)
#summaries
summary(hd)
summary(gii)
#rename the variables with (shorter) descriptive names
colnames(hd) <- c("rank", "country", "hdi", "life_exp", "exp_edu", "mean_edu","gni_c","gni_rank")
colnames(gii) <-  c("gii_rank", "country","gii", "mat_mort","ad_birth","repr_parl","sedu_f","sed_m","lab_f","lab_m")
# define a new column in gii: ratio of Female and Male populations with secondary education
gii <- mutate(gii, sedu_ratio= sedu_f/sed_m)
# define a new column in gii: ratio of labour force participation of females and males
gii <- mutate(gii, lab_ratio=lab_f/lab_m)
# join the two datasets using country as identifier
human <- inner_join(hd, gii, by = "country")
#check structure and dimensions: 195 observations and 19 variables
str(human)
dim(human)
# access the tidyr and stringr packages
library(tidyr)
library(stringr)
# look at the structure of the gni_c column in 'human': characters
str(human$gni_c)
# remove the commas from gni_c and mutate it into numeric
human$gni_c <- str_replace(human$gni_c, pattern=",", replace ="") %>% as.numeric
# columns to keep
keep <- c("country", "sedu_ratio", "lab_ratio", "life_exp", "exp_edu", "gni_c", "mat_mort", "ad_birth", "repr_parl")
# select the 'keep' columns
human <- select(human, one_of(keep))
# completeness indicator of the 'human' data
comp <- complete.cases(human)
# filter out all rows with NA values
human_ <- filter(human, comp)
# look at the last 10 observations of human
tail(human, n=10)
# define the last indice we want to keep
last <- nrow(human) - 7
# choose everything until the last 7 observations
human_ <- human[1:last, ]
# add countries as rownames
rownames(human_) <- human_$country
# remove the Country variable
human_ <- select(human, -country)
#structure of human_: 195 obs. of  8 variables
str(human_)
# save the data set in the data folder
write.csv(human_, file="human.csv", row.names = FALSE)
# choose everything until the last 7 observations
human_ <- human_[1:last, ]
# add countries as rownames
rownames(human_) <- human_$country
# remove the Country variable
human_ <- select(human, -country)
#structure of human_: 195 obs. of  8 variables
str(human_)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
#dimensions of the data sets
dim(hd)
dim(gii)
#structure
str(hd)
str(gii)
# access the dplyr library
library(dplyr)
#summaries
summary(hd)
summary(gii)
#rename the variables with (shorter) descriptive names
colnames(hd) <- c("rank", "country", "hdi", "life_exp", "exp_edu", "mean_edu","gni_c","gni_rank")
colnames(gii) <-  c("gii_rank", "country","gii", "mat_mort","ad_birth","repr_parl","sedu_f","sed_m","lab_f","lab_m")
# define a new column in gii: ratio of Female and Male populations with secondary education
gii <- mutate(gii, sedu_ratio= sedu_f/sed_m)
# define a new column in gii: ratio of labour force participation of females and males
gii <- mutate(gii, lab_ratio=lab_f/lab_m)
# join the two datasets using country as identifier
human <- inner_join(hd, gii, by = "country")
#check structure and dimensions: 195 observations and 19 variables
str(human)
dim(human)
# access the tidyr and stringr packages
library(tidyr)
library(stringr)
# look at the structure of the gni_c column in 'human': characters
str(human$gni_c)
# remove the commas from gni_c and mutate it into numeric
human$gni_c <- str_replace(human$gni_c, pattern=",", replace ="") %>% as.numeric
# columns to keep
keep <- c("country", "sedu_ratio", "lab_ratio", "life_exp", "exp_edu", "gni_c", "mat_mort", "ad_birth", "repr_parl")
# select the 'keep' columns
human <- select(human, one_of(keep))
# completeness indicator of the 'human' data
comp <- complete.cases(human)
# filter out all rows with NA values
human_ <- filter(human, comp)
# look at the last 10 observations of human
tail(human_, n=10)
# define the last indice we want to keep
last <- nrow(human_) - 7
# choose everything until the last 7 observations
human_ <- human_[1:last, ]
# add countries as rownames
rownames(human_) <- human_$country
# remove the Country variable
human_ <- select(human, -country)
#structure of human_: 195 obs. of  8 variables
str(human_)
# save the data set in the data folder
write.csv(human_, file="human.csv", row.names = FALSE)
last
# choose everything until the last 7 observations
human_ <- human_[1:last, ]
str(human_)
# add countries as rownames
rownames(human_) <- human_$country
# remove the Country variable
human_ <- select(human_, -country)
#structure of human_: 195 obs. of  8 variables
str(human_)
# save the data set in the data folder
write.csv(human_, file="human.csv", row.names = FALSE)
# choose everything until the last 7 observations
human_ <- human_[1:last, ]
str(human_)
# remove the Country variable
human_ <- select(human_, -country)
#read the data sets
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
#dimensions of the data sets
dim(hd)
dim(gii)
#structure
str(hd)
str(gii)
# access the dplyr library
library(dplyr)
#summaries
summary(hd)
summary(gii)
#rename the variables with (shorter) descriptive names
colnames(hd) <- c("rank", "country", "hdi", "life_exp", "exp_edu", "mean_edu","gni_c","gni_rank")
colnames(gii) <-  c("gii_rank", "country","gii", "mat_mort","ad_birth","repr_parl","sedu_f","sed_m","lab_f","lab_m")
# define a new column in gii: ratio of Female and Male populations with secondary education
gii <- mutate(gii, sedu_ratio= sedu_f/sed_m)
# define a new column in gii: ratio of labour force participation of females and males
gii <- mutate(gii, lab_ratio=lab_f/lab_m)
# join the two datasets using country as identifier
human <- inner_join(hd, gii, by = "country")
#check structure and dimensions: 195 observations and 19 variables
str(human)
dim(human)
# access the tidyr and stringr packages
library(tidyr)
library(stringr)
# look at the structure of the gni_c column in 'human': characters
str(human$gni_c)
# remove the commas from gni_c and mutate it into numeric
human$gni_c <- str_replace(human$gni_c, pattern=",", replace ="") %>% as.numeric
# columns to keep
keep <- c("country", "sedu_ratio", "lab_ratio", "life_exp", "exp_edu", "gni_c", "mat_mort", "ad_birth", "repr_parl")
# select the 'keep' columns
human <- select(human, one_of(keep))
# completeness indicator of the 'human' data
comp <- complete.cases(human)
# filter out all rows with NA values
human_ <- filter(human, comp)
# look at the last 10 observations of human
tail(human_, n=10)
# define the last indice we want to keep
last <- nrow(human_) - 7
# choose everything until the last 7 observations
human_ <- human_[1:last, ]
# add countries as rownames
rownames(human_) <- human_$country
# remove the country variable
human_ <- select(human_, -country)
#structure of human_: 195 obs. of  8 variables
str(human_)
# save the data set in the data folder
write.csv(human_, file="human.csv", row.names = FALSE)
